name: Build, Test & Push binaries (MacOSX)

permissions:
  contents: write

on:
  pull_request:
  push:
      paths-ignore:
        - '.clang-format'
        - '.gitignore'
        - 'License.md'
        - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
        - { image: macos-13, arch: x86_64 }
        #- { image: macos-14, arch: arm64 } # arm64 not supported by aqtinstall for 5.12.2
        kind: [static, shared]
        mode: [debug, release, releasedbg, minsizerel]

    runs-on: ${{ matrix.os.image }}

    steps:
    - name: Get current date as package key
      id: cache_key
      run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Set QT variables
      run: |
        echo "QT_OS=mac" >> $GITHUB_ENV
        echo "QT_ARCH=clang_64" >> $GITHUB_ENV
      shell: bash

    - name: Set OUTPUT_FILE variable
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "OUTPUT_FILE=${{ matrix.os.image }}_${{ matrix.os.arch }}_${{ matrix.mode }}_${{ matrix.kind }}_${{ env.VS_RUNTIME_STRING }}.tar.gz" >> $GITHUB_ENV
        else
          echo "OUTPUT_FILE=${{ matrix.os.image }}_${{ matrix.os.arch }}_${{ matrix.mode }}_${{ matrix.kind }}.tar.gz" >> $GITHUB_ENV
        fi
      shell: bash

    # Force xmake to a specific folder (for cache)
    - name: Set xmake env
      run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
      shell: bash

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Clone the whole repository to get correct tags and branches

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: '${{ env.QT_OS }}'
        target: 'desktop'
        arch: '${{ env.QT_ARCH }}'
        modules: 'debug_info'
        set-env: true
        cache: true

    # Install xmake
    - name: Setup xmake
      uses: xmake-io/github-action-setup-xmake@v1.2.2
      with:
        xmake-version: latest
        actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

    # Update xmake repository (in order to have the file that will be cached)
    - name: Update xmake repository
      run: xmake repo --update -vD

    - name: Configure xmake and install dependencies
      run: xmake config -vD --arch=${{ matrix.os.arch }} --mode=${{ matrix.mode }} --kind=${{ matrix.kind }} --yes --policies=package.precompiled:n

    - name: Build all targets
      run: xmake build -vD -a

    # We can't do --group=TESTS because every test has its own output
    - name: Run tests
      run: |
        xmake run -vD Audio-Interface-Test
        xmake run -vD Configuration-Test
        xmake run -vD Logger-Test
        xmake run -vD Login-Server-Test
        xmake run -vD Network-Messages-Test
        xmake run -vD Recording-Server-Test
        xmake run -vD Settings-Interface-Test

    - name: Install
      run: xmake install -vDo dest/ --group=EXES

    - name: Archive result
      uses: ihiroky/archive-action@v1
      with:
        root_dir: dest
        file_path: ${{ env.OUTPUT_FILE }}
        verbose: true

    - name: Compute checksum of archive
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          sha256sum -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
        else
          shasum -a 256 -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
        fi
      shell: bash

    # Release tags (for tags)
    - name: Upload binaries to release (Tag)
      uses: svenstaro/upload-release-action@v2
      if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.OUTPUT_FILE }}
        asset_name: ${{ env.OUTPUT_FILE }}
        tag: ${{ github.ref }}
        overwrite: true

    - name: Upload checksum to release (Tag)
      uses: svenstaro/upload-release-action@v2
      if: ${{ startsWith(github.event.ref, 'refs/tags/') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.OUTPUT_FILE }}.sha256
        asset_name: ${{ env.OUTPUT_FILE }}.sha256
        tag: ${{ github.ref }}
        overwrite: true
